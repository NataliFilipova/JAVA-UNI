import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;
import java.math.BigDecimal;
import java.util.List;
 
 enum Contract {
    PERMANENT, PART_TIME, TRAINEE;
}
 
 
class Employee {
    private String name;
    private  final int id;
    private int workedHours;
    private Contract contract;
 
    public BigDecimal getAdditionalSalary() {
        return additionalSalary;
    }
 
    public void setAdditionalSalary(BigDecimal additionalSalary) {
        this.additionalSalary = additionalSalary;
    }
    private BigDecimal salary;
    private BigDecimal additionalSalary;
    private static BigDecimal minSalary[] = new BigDecimal[3];
 
    public Employee(String name, int workedHours, Contract contract, BigDecimal additionalSalary) {
        this.name = name;
        this.id = 1;
        this.workedHours = workedHours;
        this.contract = contract;
        this.additionalSalary = additionalSalary;
 
 
    }
 
 
    public String getName() {
        return name;
    }
 
    public void setName(String name) {
        this.name = name;
    }
 
    public int getWorkedHours() {
        return workedHours;
    }
 
    public void setWorkedHours(int workedHours) {
        this.workedHours = workedHours;
    }
 
    public Contract getContract() {
        return contract;
    }
 
    public void setContract(Contract contract) {
        this.contract = contract;
    }
 
    public static void setMinSalary(BigDecimal[] minSalary) {
        Employee.minSalary = minSalary;
    }
 
    public BigDecimal getSalary() {
        return this.salary;
    }
 
    public void setSalary() {
        this.salary = salary();
    }
 
 
 
    public static BigDecimal[] getMinSalary() {
        return minSalary;
    }
 
    public static void setMinSalary(List<Double> minSalaryPerHour) {
        minSalary[0] = BigDecimal.valueOf(minSalaryPerHour.get(0));
        minSalary[1] = BigDecimal.valueOf(minSalaryPerHour.get(1));
        minSalary[2] = BigDecimal.valueOf(minSalaryPerHour.get(2));
    }
 
    public BigDecimal salary(){
        BigDecimal salaryy;
        if(contract.toString().equals("PERMANENT")){
            salaryy = minSalary[0];
        }
        else if(contract.toString().equals("PART_TIME")){
            salaryy = minSalary[1];
        }
        else {
            salaryy = minSalary[2];
        }
            return (salaryy.add(additionalSalary)).multiply(BigDecimal.valueOf(workedHours));
 
    }
    public void increaseSalary(double percent){
        if (percent <=0 ){
            return;
        }
        this.additionalSalary = getAdditionalSalary().add(additionalSalary.multiply(BigDecimal.valueOf(percent / 100)));
 
    }
 
    @Override
    public String toString() {
        return "Employee{" +
                "name='" + name + '\'' +
                ", id=" + id +
                ", workedHours=" + workedHours +
                ", contract=" + contract +
                ", additionalSalary=" + additionalSalary +
                ", salary=" + salary +
                '}';
    }
}
class Company {
    private String name;
    private static int maxEmployee;
    private List<Employee> employeeList = new ArrayList<>();
 
    public List<Employee> getEmployeeList() {
        return employeeList;
    }
 
    public void setEmployeeList(List<Employee> employeeList) {
        this.employeeList = employeeList;
    }
 
    public Company(String name, int maxEmployee) {
        this.name = name;
        this.maxEmployee = maxEmployee;
 
    }
 
    public void hireEmployee(Employee employee){
        if(employeeList.contains(employee)){
            System.out.println("Already in");
            return;
        }
        else if(employeeList.size()+1 > maxEmployee){
 
            return;
        }
        else{
            employeeList.add(employee);
        }
 
 
    }
    public void fireEmployee(Employee employee){
        employeeList.remove(employee);
    }
 
    public BigDecimal averageSalary(){
       BigDecimal sum = BigDecimal.valueOf(0.0);
         if(getEmployeeList().size()== 0){
            return sum;
        }
        for(Employee employee : employeeList) {
            employee.setSalary();
            sum = employee.getSalary().add(sum);
        }
        sum = sum.divide(BigDecimal.valueOf(employeeList.size()), 2, RoundingMode.HALF_UP);
        return sum;
    }
 
    public void IncreaseSalaries(double percent){
         if (percent <=0 ){
            return;
        }
        for(Employee  employee : employeeList) {
            employee.increaseSalary(percent);
            employee.setSalary();
        }
    }
 
    public BigDecimal averageSalaryPerContractType(Contract contract){
         BigDecimal sum = BigDecimal.valueOf(0.0);
        if(getEmployeeList().size()== 0){
            return(sum);
        }
        int count = 0;
 
        if(contract.toString().equals("PERMANENT")){
            for(Employee employee : employeeList){
                if(employee.getContract().toString().equals("PERMANENT")){
                    sum = sum.add(employee.getSalary());
                    count += 1;
                }
            }
        }
        else if(contract.toString().equals("PART_TIME")){
            for(Employee employee : employeeList){
                if(employee.getContract().toString().equals("PART_TIME")){
                    sum = sum.add(employee.getSalary());
                    count += 1;
                }
            }
        }
        else if(contract.toString().equals("TRAINEE")){
            for(Employee employee : employeeList){
                if(employee.getContract().toString().equals("TRAINEE")){
                    sum = sum.add(employee.getSalary());
                    count += 1;
                }
            }
        }
        if(count == 0){
            return BigDecimal.valueOf(0);
        }
        return sum.divide(BigDecimal.valueOf(count), 2, RoundingMode.HALF_UP);
 
    }
}
 
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
 
        String companyName = bufferedReader.readLine();
 
        int maxNumberOfEmployees = Integer.parseInt(bufferedReader.readLine().trim());
 
        List<Double> minSalaryList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Double::parseDouble)
            .collect(toList());
 
        List<String> namesList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .collect(toList());
 
        List<Integer> workedHoursList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());
 
        List<String> contractTypeList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .collect(toList());
 
        List<Double> additionalSalaryList = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Double::parseDouble)
            .collect(toList());
 
        String contractType = bufferedReader.readLine();
 
        double increasePercentage = Double.parseDouble(bufferedReader.readLine().trim());
 
        // Set the min salary per hour, that depends on the contract type. Use the values in the minSalaryList: the first value is for PERMANENT, the second is for PART_TIME, the third is for TRAINEE
        Employee.setMinSalary(minSalaryList);
        // Create company by using companyName and maxNumberOfEmployees
        Company company = new Company(companyName, maxNumberOfEmployees);
        // Create 6 employees by using the values in the namesList, workedHoursList, contractTypeList, and additionalSalaryList. Example for creating the first employee:  Employee employee1 = new Employee(namesList.get(0), workedHoursList.get(0), BigDecimal.valueOf(additionalSalaryList.get(0)), ContractType.valueOf(contractTypeList.get(0)));
          Employee employee1 = new Employee(namesList.get(0), workedHoursList.get(0), Contract.valueOf(contractTypeList.get(0)), BigDecimal.valueOf(additionalSalaryList.get(0)));
        Employee employee2 = new Employee(namesList.get(1), workedHoursList.get(1), Contract.valueOf(contractTypeList.get(1)), BigDecimal.valueOf(additionalSalaryList.get(1)));
        Employee employee3 = new Employee(namesList.get(2), workedHoursList.get(2), Contract.valueOf(contractTypeList.get(2)), BigDecimal.valueOf(additionalSalaryList.get(2)));
        Employee employee4 = new Employee(namesList.get(3), workedHoursList.get(3), Contract.valueOf(contractTypeList.get(3)), BigDecimal.valueOf(additionalSalaryList.get(3)));
        Employee employee5 = new Employee(namesList.get(4), workedHoursList.get(4), Contract.valueOf(contractTypeList.get(4)), BigDecimal.valueOf(additionalSalaryList.get(4)));
        Employee employee6 = new Employee(namesList.get(5), workedHoursList.get(5), Contract.valueOf(contractTypeList.get(5)), BigDecimal.valueOf(additionalSalaryList.get(5)));
 
        // Hire all the 6 employees to work at the company
        company.hireEmployee(employee1);
        company.hireEmployee(employee2);
       company.hireEmployee(employee3);
       company.hireEmployee(employee4);
       company.hireEmployee(employee5);
        company.hireEmployee(employee6);
 
        // Print the result of calling the method averageSalary()
 
        if(company.averageSalary().compareTo(BigDecimal.valueOf(0.0) )== 0){
            System.out.println(0);
        }
        else{
            System.out.println(company.averageSalary());
        }
        // Increase the additional salary per hour, by calling the method increaseSalaries(). Use increasePercentage as an argument: company.increaseSalaries(BigDecimal.valueOf(increasePercentage));
 
    company.IncreaseSalaries(increasePercentage);
        // Print the result of calling the method averageSalary(), after increasing the additional salary per hour of all employees.
         if(company.averageSalary().compareTo(BigDecimal.valueOf(0.0) )== 0){
            System.out.println(0);
        }
        else{
            System.out.println(company.averageSalary());
        }
        // Print the result of calling the method averageSalaryByType(). Use the string contractType with ContractType.valueOf() method to pass it as argument: System.out.println(company.averageSalaryByType(ContractType.valueOf(contractType)));
 if(company.averageSalaryPerContractType(Contract.valueOf(contractType)).compareTo(BigDecimal.valueOf(0.0) )== 0){
            System.out.println(0);
        }
 
        else {
            System.out.println(company.averageSalaryPerContractType(Contract.valueOf(contractType)));
        }
 
    }
}